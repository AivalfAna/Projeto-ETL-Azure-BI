{
	"name": "DFCorrigeMovies",
	"properties": {
		"folder": {
			"name": "DFCorrigeMovies"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DLDSMovies",
						"type": "DatasetReference"
					},
					"name": "dlMovies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DLDS2Movies",
						"type": "DatasetReference"
					},
					"name": "DLMoviesFinal"
				}
			],
			"transformations": [
				{
					"name": "SelectCorrecaoNome"
				},
				{
					"name": "FiltroYearMovie"
				},
				{
					"name": "DerivadaPrimeiroGenre"
				},
				{
					"name": "RankingMovieRating"
				},
				{
					"name": "AggregateRatings"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dlMovies",
				"dlMovies select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rottan Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCorrecaoNome",
				"SelectCorrecaoNome filter(toInteger(year) > 1950) ~> FiltroYearMovie",
				"FiltroYearMovie derive(PrimaryGenre = iif(locate('|', genres) > 1, left(genres, locate('|', genres) - 1), genres)) ~> DerivadaPrimeiroGenre",
				"DerivadaPrimeiroGenre window(over(PrimaryGenre,",
				"          year),",
				"     asc({Rottan Tomato}, true),",
				"     RatingRanking = rank()) ~> RankingMovieRating",
				"RankingMovieRating aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverageRating = avg(toInteger({Rottan Tomato})) ,",
				"          HighRated = first(title),",
				"          LowerRated = last(title),",
				"          NumberOfMovies = count()) ~> AggregateRatings",
				"AggregateRatings sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MoviesFinal.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DLMoviesFinal"
			]
		}
	}
}